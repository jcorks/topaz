/// Inherits from Topaz.Component
///
/// Allows for running of functions at regular intervals.
class Topaz.Scheduler


/// The constructor requires a mode.
func [constructor] ->
    /// The mode to use.
    TOPAZ.SCHEDULER.MODE mode


/// Assigns a new task for the scheduler to process. Once 
/// the interval time has elapsed, the callback will be called.
/// This expects a "map" object. The following members within the 
/// map are looked for:
///     "taskName"  (string)
///         The name of the task. The existence of this key determines 
///         whether this is a "simple task" or a "full task". Simple
///         tasks only contain an interval property and a callback,
///         all other keys of the argument are ignored. Full tasks 
///         are expected to have properties for the callback, internal,
///         taskName, and intervalDelay.
///
///     "interval" (integer)
///         How often the task will run. If the mode is topazScheduler_Mode_Time,
///         the interval is a time in milliseconds. If the mode is 
///         topazScheduler_Mode_Frame, the the interval is the number 
///         of frames.
///
///     "initialDelay" (integer)
///         The initial delay before the task starts being measured.
///
///     "callback" (Function)
///         Callback is called when the interval expires.
///
/// The name of the task is always returned.
func startTask -> String
    /// The argument map containing the task's properties.
    Object args




/// Halts the task with the given name.
/// If no such task exists, no action is taken.
///
func endTask ->
    /// The name of the task to remove. 
    String taskName

/// Stops processing and timing of tasks until topaz_scheduler_resume() is called.
///
func pause ->
    /// The scheduler to pause.
    String taskName

/// Resumes processing of tasks once more. If the scheduler was not 
/// paused, no action is taken.
func resume ->
    /// The scheduler to resume.
    String taskName 


/// Gets the interval amount before the task interval
/// is next complete.
func getTaskIntervalRemaining -> Number 
    /// The name of the task to query.
    String taskName 

/// Returns an array of the names of all tasks currently running.
/// 
Array tasks

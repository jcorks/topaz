/// Manages assets and acts as a repository for them.
///
/// Many projects require thats some external data be 
/// loaded in during the running of the program. The Resources 
/// module provides a means to accomplish this.
/// Using standardized pathing and built-in IO translators,
/// this module will translate data for you.
///
/// Often in projects, the same asset will be used in multiple parts within 
/// the program. This module will resuse assets already loaded to provide a quick,
/// transparent way to quickly access assets.
singleton Topaz.Resources


/// Creates a new asset with an auto-generated name.
/// The name will be registered with the resources instance and 
/// can be used to refer to the asset.
func createAsset -> Topaz.Asset
    /// The asset type.
    @TOPAZ.ASSET.TYPE type 


/// Either creates a new asset if the given name doesn't exist, or 
/// returns an existing asset.
/// In the case that a new asset needs to be created, 
/// if the fileType is not able to be interpreted, then 
/// undefined is returned. This is only checked if the name doesn't exist.
/// In the case that a new asset is created, the returned asset 
/// can then be used directly to load data. See asset.h
/// 
func fetchAsset -> Topaz.Asset 
    /// The asset type.
    @TOPAZ.ASSET.TYPE type 
    /// The unique name of the asset.
    @String name 


/// Convenience function that attempts to load a new asset 
/// from the filesystem directly. This is recommended for small assets that are 
/// effectively instanteous. If a more robust solution is needed,
/// consider using the C interface to extend scripting features.
///
/// "name" is used as the name of the asset. For functions that refer to 
/// asset names to uniquely identify an asset such as fetchAsset().
///
/// "path" is used as the filesystem path to read the asset from. This assumes the 
/// current path is Topaz.Resources.path 
///
/// "fileType" is the extension of the file used to determine with IO Translator 
/// to use to interpret data.
///
/// Like with fetchAsset, if an asset of the given name 
/// already exists, the preloaded asset is returned. If not, 
/// then a new asset is created whos name will match the path given.
/// Then, the data is attempted to be loaded from disk. The name given is 
/// first checked to see if its a partial path relative to 
/// the resources's resource path (Topaz.Resources.path). Then 
/// its interpreted as a full path.
/// If the data could not be inerpreted as the given type, or the source 
/// data is unavailable, undefined is returned.
///
func loadAsset -> Topaz.Asset 
    /// The extension / filetype to attempt to read with. i.e. 'png'
    @String extension 
    /// The path to the asset.
    @String path
    /// The unique name to give to the asset.
    @String name 

/// Equivalent to topaz_resources_load_asset, except instead of reading 
/// from the filsystem, raw byte data is read instead. Each member of 
/// the array is expected to be a byte value (0-255)
///
func loadAssetData -> Topaz.Asset 
    /// The extension / filetype to attempt to read with. i.e. 'png'
    @String extension 
    /// The raw data for the asset. Read as if contiguous bytes.
    @Array bytes
    /// The unique name to give to the asset.
    @String name 

/// Equivalent to topaz_resources_load_asset, except instead of reading
/// from the filesystem, raw byte data is generated from an encoded
/// base64 string.
///
func loadAssetBase64 -> Topaz.Asset
    /// The extension / filetype to attempt to read with. i.e. 'png'
    @String extension
    /// The raw data for the asset. Read as a base64 string.
    @String base64
    /// The unique name to give to the asset.
    @String name 

/// Writes an asset to the filesystem at the outputpath 
/// given relative to the resources path.
///
func writeAsset -> Boolean
    /// The asset to write.
    @Topaz.Asset asset
    /// The type to write the asset as.
    @String extension 
    /// The output path to write to. This is system-dependent based on the filesystem backend.
    /// See Topaz.Filesystem for more information.
    @String path 

/// Removes the asset by name.
func removeAsset -> 
    /// Name of the asset to remove.
    @String name 

/// Returns whether a particular file extension is supported.
///
func isExtensionSupport -> Boolean 
    /// The name of the file extension / type to request.
    @String ext

/// Current path for reading / writing operations. In cases where 
/// a partial path is given when using resource features 
/// that references the database, this path will be assumed 
/// to be the "current directory".
@String path

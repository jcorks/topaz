///
/// An abstraction for the environment's means of 
/// displaying rendered information.
///
/// In most contexts / systems, the display is a window within the 
/// desktop environment. On embedded systems, this may be the entire
/// screen display.
///
/// Because of the flexibility / variation in what a display can be
/// some backends may choose to implement features differently
/// or omit features altogether where appropriate.
///
class Topaz.Display

/// Destroys the display.
func destroy ->

/// Resizes the display. If the display does not support resizing, no action is taken.
///    
func resize ->
    /// The new width.
    Int width
    /// The new height.
    Int height

/// Adds an additional callback function to be called 
func addParameterCallback -> Int
    /// The callback to add.
    Function callback
    
    
/// Gets a parameter from the display.
func getParameter -> Int
    /// The parameter to retrieve.
    TOPAZ.DISPLAY.PARAMETER parameter


/// Sets a parameter from the display.
func setParameter -> Int
    /// The parameter to modify.
    TOPAZ.DISPLAY.PARAMETER parameter
    /// The new value for the parameter.
    Int value

/// Adds an additional callback function to be called after
/// the occurance of a closing event.
///
/// Typically on desktop systems,
/// this is triggered by pressing the close button on the window
/// associated with the Display. Callbacks are run in the order that they
/// were added in. The ID is returned.
///
func addCloseCallback -> Int
    /// The callback to add.
    Function callback

/// Removes the callback by id.
///
func removeCallback ->
    /// The callback to remove.
    Int callbackID




/// Returns the width of the display.
/// Read-only.
Int width

/// Returns the height of the display.
/// Read-only.
Int height


/// Gets the framebuffer specified.
func getFramebuffer -> Topaz.Framebuffer 
    /// The framebuffer to get.
    TOPAZ.DISPLAY.FRAMEBUFFER fb

/// Sets the framebuffer as the main framebuffer. This framebuffer 
/// is rendered into the display every frame.
func useFramebuffer -> 
    /// The framebuffer to use.
    TOPAZ.DISPLAY.FRAMEBUFFER fb


/// The current framebuffer in use.
Topaz.Framebuffer framebuffer

/// Forces clearing of the results of drawing stored within the current framebuffer.
///
func clearMainFramebuffer ->
    /// What data to clear from the framebuffer
    TOPAZ.RENDERER.LAYER layer
    
    
/// Gets the contents of the current framebuffer and 
/// puts the data into an image asset frame. 
/// The input image is cleared, resized to match the 
/// framebuffer size, and given one frame which matches the 
/// the framebuffer data.
///
/// NOTE: in general, this operation is considered "slow" as 
/// it requires a lot of communication between the backend 
/// renderer and engine, which are most likely on different 
/// devices. Use sparringly!
func captureMainFramebuffer -> 
    /// The image to populate.
    Topaz.Image capture



/// Retrieves the camera associated with the display thats 
/// used for 2d operations. This camera is used when the display is set as 
/// the main display. see topazViewManager_t
/// Read-only.
Topaz.Entity camera2d

/// Retrieves the camera associated with the display thats 
/// used for 3d operations. This camera is used when the display is set as 
/// the main display. see topazViewManager_t
/// Read-only.
Topaz.Entity camera3d

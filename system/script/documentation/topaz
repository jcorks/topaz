///
/// The context instance for the toolkit. 
/// Most data within the topaz project is contextualized
/// under some a topaz instance at some level, so it is 
/// often that a topaz context is needed.
///
/// In the scripting content, only one Topaz instance
/// is accessible.
///
singleton Topaz


/// Begins the Engine execution loop.
///
/// Once run is initiated, all drawing to the screen and logic updating
/// is automated. While running, it is also possible to utilize the
/// debugging features such as the console and Entity debugger.
func run -> 


/// Pauses the Engine execution loop.
///
/// Once in a paused state, only critical objects (managers marked with pausable == false),
/// will be updated.
func pause -> 


/// Immediately pauses the execution loop.
///
/// Like Pause() but disrupts the engine immediately rather than safely waiting 
/// until the next iteration. Most useful for debugging purposes.
func break -> 


///  Resumes from a paused or broken state.
///
func resume ->  



/// Updates the main engine.
///
/// Does not include frame throttling
func iterate -> 

/// Performs a stepping operation for the entire engine. This is normally
/// called through topaz_context_iterate(), which is called by topaz_context_run().
///
func step ->

/// Performs a drawing operation for the entire engine. This is normally
/// called through topaz_context_iterate(), which is called by topaz_context_run().
///
func draw ->


/// Attaches a management-type entity.
///
/// If pausable is false, the manager will continue to update even when 
/// the engine is in a paused state.
/// Managers are kept separate from the root entity tree and are unaffected
/// switching of the root entity.
/// the pre_manager* calls ensure that these managers are stepped/drawn BEFORE 
/// the normal entity tree. 
///
func attachPreManager ->
    
    /// The entity to become a manager.
    Topaz.Entity ent



/// Same as topaz_context_attach_pre_manager, but the when the pause 
/// state is entered, these managers are unaffected.
///
func attachPreManagerUnpausable ->

    /// The entity to become a manager.
    Topaz.Entity ent


/// Same as topaz_context_attach_pre_manager, but the manager is updated 
/// AFTER the main entity tree.
///
func attachPostManager -> 

    /// The entity to become a manager.
    Topaz.Entity ent

/// Same as topaz_context_attach_post_manager, but the manager is updated 
/// even when the paused state is entered
///
func attachPostManagerUnpausable ->

    /// The entity to become a manager.
    Topaz.Entity ent


/// Ends the context execution loop.
///
func quit ->

/// Sleeps until the time required for the target frames-per-second is reached.
/// The actual resolution is machine-dependent, but it tends to be millisecond resolution.
/// This will pause the main thread.
///
func wait ->
    
    /// The target updates per second.
    Int FPS

func import ->



/// Prints to the registered topaz console. If one arg is given,
/// A new line is always printed. Else, the second argument 
/// is used to determine whether the line should advance 
/// after printing.
func log -> 

    /// The string to print.
    String str 
    
    /// Whether to add a newline. (Optional)
    Boolean newline


/// Given an array of byte (0-255) values, a base64-formatted
/// string will be returned.
func toBase64 -> string

    /// The bytes to convert.
    Array inputBytes
    
    
    
/// Given a base64 string, a Topaz.Data asset will be returned 
/// allowing a means to access the raw data. If the string 
/// is invalid, undefined is returned.
func fromBase64 -> Topaz.Data
    
    /// The string to convert.
    String base64
    


///  returns whether the engine is in a paused or broken state.
///
boolean isPaused


/// Gets/sets the toplevel Entity. 
///
/// From here, you can 
/// set the Entity that holds the toplevel of the project. 
/// By default there is none.
/// From this entity, all other entities will be updated.
/// topaz handles entities in a hierarchical structure,
/// so the root must be populated and managed.
Topaz.Entity root


/// Gets the number of milliseconds since creating this context.
///
number time

/// The micro version number for topaz.
int versionMicro

/// The major version number for topaz.
int versionMajor 

/// The minor version number for topaz.
int versionMinor




/// Singleton for Filesystem-related tools.
Topaz.Filesystem </br>

/// Singleton for Input-related symbols.
Topaz.Input </br>

/// Singleton for Audio-related symbols.
Topaz.Audio </br>

/// Singleton for Resource-related symbols.
Topaz.Resources </br>

/// Singleton for FontManager-related symbols.
Topaz.FontManager </br>



/// Enumerator for different scheduler modes.
/// See Topaz.Scheduler
enum Topaz.Scheduler.Mode 
    /// Tells the scheduler to measure with real time.
    eval time

    /// Tells the scheduler to measyre with frames.
    eval frame


/// Enumerator for different particle properties.
/// See Topaz.Particle
enum Topaz.Particle.Property 
    /// The duration of the particle.
    eval duration

    /// The X-scale of the particle.
    eval scaleX

    /// The Y-scale of the particle.
    eval scaleY

    /// The total multiplier for the scale.
    eval scaleMultiplier

    /// The rotation of the particle in degrees.
    eval rotation

    /// The direction that the particle is headed. Under 0 degree rotation
    /// which is the default, +/- speedX translates to right and left movement.
    /// +/- speedY translates to down and upward movement respectively.
    eval direction

    /// Speed in the X direction.
    eval speedX

    /// Speed in the y direction.
    eval speedY

    /// Red color of the particle.
    eval red
    /// green color of the particle.
    eval green
    /// Blue color of the particle.
    eval blue
    /// Alpha (transparency) of the particle.
    eval alpha


/// Enumerator for the different available automation 
/// functions. Every automation can have functions associated with it
/// that describe how values change over time. These primitive 
/// functions can be string together to make virtually any 
/// value description.
/// See Topaz.Automation.
enum Topaz.Automation.Function
    /// The value instantaneously becomes the end value.
    eval none 

    /// The value linearly becomes the end value.
    eval linear 

    /// The value becomes the end value slowly, then ramps up according to a square relationship.
    eval square 

    /// The value becomes the end value slowly, then ramps up according to a cube relationship.
    eval cube 

    /// The value becomes the end value quickly, then slows down according to a square relationship.
    eval squareRoot 

    /// The value becomes the end value quickly, then slows down according to a cube relationship.
    eval cubeRoot 

    /// The value becomes any value between begin and end when it is re-sampled.
    eval random


/// Enumerator of all possible collision groups available for use 
/// within Topaz.Object2D. By default, all objects belong to group A.
enum Topaz.Object2D.Group
    /// Collision group A
    eval A
    /// Collision group B
    eval B
    /// Collision group C
    eval C
    /// Collision group D
    eval D
    /// Collision group E
    eval E
    /// Collision group F
    eval F
    /// Collision group G
    eval G
    /// Collision group H
    eval H
    /// Collision group I
    eval I
    /// Collision group J
    eval J
    /// Collision group K
    eval K
    /// Collision group L
    eval L
    /// Collision group M
    eval M
    /// Collision group N
    eval N
    /// Collision group O
    eval O
    /// Collision group P
    eval P
    /// Collision group Q
    eval Q
    /// Collision group R
    eval R
    /// Collision group S
    eval S
    /// Collision group T
    eval T
    /// Collision group U
    eval U
    /// Collision group V
    eval V
    /// Collision group W
    eval W
    /// Collision group X
    eval X
    /// Collision group Y
    eval Y
    /// Collision group Z
    eval Z


/// The parameters control more fine operations when rendering the 
/// the objects.
///
enum Topaz.Render2D.Parameter
    /// The transparency rule for the 2D object.
    /// Default is Topaz.Renderer.AlphaRule.allow
    ///
    eval alphaRule
    /// The transparency rule for the 2D object.
    /// Default is Topaz.Renderer.DepthTest.none
    ///
    eval depthTest 

    /// The currently set etch rule, which determines how the 
    /// etch rules is applied when rendering this 2d object.
    /// Default is Topaz.Renderer.EtchRule.out
    ///
    eval etchRule

    /// The texturing hint for the 2D object.
    /// Default is Topaz.Renderer.TextureFilterHint.linear
    ///
    eval textureFilterHint



/// Allows for etching, which will ignore rendered results if they arent in the etch.
/// Etch regions last until next frame by default.
///
enum Topaz.Renderer.EtchRule 
    /// Default, no etching is done
    ///
    eval noEtching

    /// Along with whatever is being drawn, the etch region is defined. 
    /// Etches are only defined in ares where the depth test passes
    ///
    eval define 

    /// Along with whatever is being drawn, the etch region is undefined if 
    /// defined within the frame.
    ///
    eval undefine 

    /// Only shows things that fall within the etch region
    ///
    eval in 

    /// Only shows things that fall OUTSIDE the etch region
    ///
    eval out


/// Defines the depth test, meaning the rule that determines which objects are to be 
/// to be drawn in front or behind. "Less" is the standard for 3D, which allows polygons 
/// with a lower depth to be drawn in front. "NoTest" is standard for 2D, which 
/// allows graphics drawn later to be on top.
///
enum Topaz.Renderer.DepthTest 
    /// Generated framebuffer elements whose calculated depth are less
    /// will be in front.
    ///
    eval less
    /// Generated framebuffer elements whose calculated depth are <=
    /// will be in front.
    ///
    eval LEQ 
    /// Generated framebuffer elements whose calculated depth are greater
    /// will be in front.
    ///
    eval greater 
    /// Generated framebuffer elements whose calculated depth are >=
    /// will be in front.
    ///
    eval GEQ
    /// Generated framebuffer elements whole calculated depth is equal to 
    /// whats in the depth buffer
    eval equal
    /// No depth test is calculated. All elements pass.
    ///
    eval none


/// Allows for differenct transparency effects 
///
enum Topaz.Renderer.AlphaRule 
    /// allows for standard "fade" transparency. What we're all used to
    ///
    eval allow 

    /// Ignores transparency
    ///
    eval opaque 
    /// Additive blending, which adds the result color ontop of whats already 
    /// there.
    ///
    eval translucent 
    /// Makes the drawn objects invisible. Note that etching and depth 
    /// information may still be written.
    ///
    eval invisible


/// Defines the texture filter hint. Linear will 
/// texture all subsequent textures bilinearly, giving 
/// a smoother look to textures when scaled up.
/// Hints may be ignored by the renderer
///
enum Topaz.Renderer.TextureFilterHint
    /// Linear filtering of textures.
    ///
    eval linear
    /// No filtering of textures.
    ///
    eval none


/// Sets whether groups should interact. By default, only Group A interacts with Group A
///
func Topaz.Object2D.setGroupInteraction
    /// First interaction group.
    Topaz.Object2D.Group firstGroup
    /// Other interaction group.
    Topaz.Object2D.Group otherGroup
    /// Whether to interact.
    Boolean interact

/// Standard input buttons for built-in device types.
enum Topaz.Key
    /// Not an input.
    topazNotAnInput = 0,
    /// The 0 key.
    topazKey_0= 1,
    /// The 1 key.
    topazKey_1= 2,
    /// The 2 key.
    topazKey_2= 3, 
    /// The 3 key.
    topazKey_3= 4,
    /// The 4 key.
    topazKey_4= 5,
    /// The 5 key.
    topazKey_5= 6,
    /// The 6 key.
    topazKey_6= 7,
    /// The 7 key.
    topazKey_7= 8,
    /// The 8 key.
    topazKey_8= 9,
    /// The 9 key.
    topazKey_9= 10,
    /// The a key.
    topazKey_a= 11,
    /// The b key.
    topazKey_b= 12, 
    /// The c key.
    topazKey_c= 13, 
    /// The d key.
    topazKey_d= 14, 
    /// The e key.
    topazKey_e= 15, 
    /// The f key.
    topazKey_f= 16, 
    /// The g key.
    topazKey_g= 17, 
    /// The h key.
    topazKey_h= 18, 
    /// The i key.
    topazKey_i= 19, 
    /// The j key.
    topazKey_j= 20,  
    /// The k key.
    topazKey_k= 21, 
    /// The l key.
    topazKey_l= 22, 
    /// The m key.
    topazKey_m= 23, 
    /// The n key.
    topazKey_n= 24, 
    /// The o key.
    topazKey_o= 25, 
    /// The p key.
    topazKey_p= 26, 
    /// The q key.
    topazKey_q= 27, 
    /// The r key.
    topazKey_r= 28, 
    /// The s key.
    topazKey_s= 29, 
    /// The t key.
    topazKey_t= 30, 
    /// The u key.
    topazKey_u= 31, 
    /// The v key.
    topazKey_v= 32, 
    /// The w key.
    topazKey_w= 33, 
    /// The x key.
    topazKey_x= 34, 
    /// The y key.
    topazKey_y= 35, 
    /// The z key.
    topazKey_z= 36, 
    /// The lshift key.
    topazKey_lshift= 37, 
    /// The rshift key.
    topazKey_rshift= 38, 
    /// The lctrl key.
    topazKey_lctrl= 39,  
    /// The rctrl key.
    topazKey_rctrl= 40,  
    /// The lalt key.
    topazKey_lalt= 41,   
    /// The ralt key.
    topazKey_ralt= 42,   
    /// The tab key.
    topazKey_tab= 43,    
    /// The F1 key.
    topazKey_F1= 44,     
    /// The F2 key.
    topazKey_F2= 45,     
    /// The F3 key.
    topazKey_F3= 46,     
    /// The F4 key.
    topazKey_F4= 47,     
    /// The F5 key.
    topazKey_F5= 48,     
    /// The F6 key.
    topazKey_F6= 49,     
    /// The F7 key.
    topazKey_F7= 50,     
    /// The F8 key.
    topazKey_F8= 51,     
    /// The F9 key.
    topazKey_F9= 52,     
    /// The F10 key.
    topazKey_F10= 53,    
    /// The F11 key.
    topazKey_F11= 54,    
    /// The F12 key.
    topazKey_F12= 55,    
    /// The up key.
    topazKey_up= 100,     
    /// The down key.
    topazKey_down= 101,   
    /// The left key.
    topazKey_left= 102,   
    /// The right key.
    topazKey_right= 103,  
    /// The minus key.
    topazKey_minus= 104,  
    /// The equal key.
    topazKey_equal= 105,  
    /// The backspace key.
    topazKey_backspace= 106,  
    /// The grave key.
    topazKey_grave= 107,  
    /// The esc key.
    topazKey_esc= 108,    
    /// The home key.
    topazKey_home= 109,   
    /// The pageUp key.
    topazKey_pageUp= 110, 
    /// The pageDown key.
    topazKey_pageDown= 111,  
    /// The end key.
    topazKey_end= 112,    
    /// The backslash key.
    topazKey_backslash= 113, 
    /// The lbracket key.
    topazKey_lbracket= 114, 
    /// The rbracket key.
    topazKey_rbracket= 115, 
    /// The semicolon key.
    topazKey_semicolon= 116, 
    /// The apostrophe key.
    topazKey_apostrophe= 117, 
    /// The frontslash key.
    topazKey_frontslash= 118, 
    /// The enter key.
    topazKey_enter= 119, 
    /// The delete key.
    topazKey_delete= 120, 
    /// The numpad0 key.
    topazKey_numpad0= 121, 
    /// The numpad1 key.
    topazKey_numpad1= 122, 
    /// The numpad2 key.
    topazKey_numpad2= 123, 
    /// The numpad3 key.
    topazKey_numpad3= 124, 
    /// The numpad4 key.
    topazKey_numpad4= 125, 
    /// The numpad5 key.
    topazKey_numpad5= 126, 
    /// The numpad6 key.
    topazKey_numpad6= 127, 
    /// The numpad7 key.
    topazKey_numpad7= 128, 
    /// The numpad8 key.
    topazKey_numpad8= 129, 
    /// The numpad9 key.
    topazKey_numpad9= 130, 
    /// The prtscr key.
    topazKey_prtscr= 131, 
    /// The lsuper key.
    topazKey_lsuper= 132, 
    /// The rsuper key.
    topazKey_rsuper= 133, 
    /// The space key.
    topazKey_space= 134,  
    /// The insert key.
    topazKey_insert= 135, 
    /// The comma key.
    topazKey_comma= 136, 
    /// The period key.
    topazKey_period= 137 , 
    /// The world1 key.
    topazKey_world1= 138, 
    /// The world2 key.
    topazKey_world2= 139, 
    /// The world3 key.
    topazKey_world3= 140, 
    /// The world4 key.
    topazKey_world4= 141,  
    /// The world5 key.
    topazKey_world5= 142,  
    /// The world6 key.
    topazKey_world6= 143, 
    /// The world7 key.
    topazKey_world7= 144,  
    /// The world8 key.
    topazKey_world8= 145,  
    /// The world9 key.
    topazKey_world9= 146,  

    /// The 0th pointer button.
    topazPointer_0= 256, 
    /// The 1st pointer button.
    topazPointer_1= 257, 
    /// The 2nd pointer button.
    topazPointer_2= 258, 

    /// The pointer x axis.
    topazPointer_X= 259, 
    /// The pointer y axis.
    topazPointer_Y= 260, 
    /// The pointer wheel axis.
    topazPointer_Wheel= 261, 

    /// The a pad input.
    topazPad_a= 300,     
    /// The b pad input.
    topazPad_b= 301,     
    /// The c pad input.
    topazPad_c= 302,     
    /// The x pad input.
    topazPad_x= 303,     
    /// The y pad input.
    topazPad_y= 304,     
    /// The r pad input.
    topazPad_r= 305,     
    /// The l pad input.
    topazPad_l= 306,     
    /// The r2 pad input.
    topazPad_r2= 307,    
    /// The l2 pad input.
    topazPad_l2= 308,    
    /// The r3 pad input.
    topazPad_r3= 309,    
    /// The l3 pad input.
    topazPad_l3= 310,    
    /// The start pad input.
    topazPad_start= 311,    
    /// The select pad input.
    topazPad_select= 312,
    /// The b13 pad input.
    topazPad_b13= 313,
    /// The b14 pad input.
    topazPad_b14= 314,
    /// The b15 pad input.
    topazPad_b15= 315,
    /// The b16 pad input.
    topazPad_b16= 316,
    /// The b17 pad input.
    topazPad_b17= 317,
    /// The b18 pad input.
    topazPad_b18= 318,
    /// The b19 pad input.
    topazPad_b19= 319,
    /// The b20 pad input.
    topazPad_b20= 320,
    /// The b21 pad input.
    topazPad_b21= 321,
    /// The b22 pad input.
    topazPad_b22= 322,
    /// The b23 pad input.
    topazPad_b23= 323,
    /// The b24 pad input.
    topazPad_b24= 324,
    /// The b25 pad input.
    topazPad_b25= 325,
    /// The b26 pad input.
    topazPad_b26= 326,
    /// The b27 pad input.
    topazPad_b27= 327,
    /// The b28 pad input.
    topazPad_b28= 328,
    /// The b29 pad input.
    topazPad_b29= 329,
    /// The b30 pad input.
    topazPad_b30= 330,
    /// The b31 pad input.
    topazPad_b31= 331,
    /// The b32 pad input.
    topazPad_b32= 332,

    /// The axisX pad input.
    topazPad_axisX= 400, 
    /// The axisY pad input.
    topazPad_axisY= 401, 
    /// The axisZ pad input.
    topazPad_axisZ= 402, 
    /// The axisX2 pad input.
    topazPad_axisX2= 403,
    /// The axisY2 pad input.
    topazPad_axisY2= 404,
    /// The axisZ2 pad input.
    topazPad_axisZ2= 405,
    /// The axisX3 pad input.
    topazPad_axisX3= 406,
    /// The axisY3 pad input.
    topazPad_axisY3= 407,
    /// The axisZ3 pad input.
    topazPad_axisZ3= 408,
    /// The axisX4 pad input.
    topazPad_axisX4= 409,
    /// The axisY4 pad input.
    topazPad_axisY4= 410,
    /// The axisZ4 pad input.
    topazPad_axisZ4= 411,
    /// The axisX5 pad input.
    topazPad_axisX5= 412,
    /// The axisY5 pad input.
    topazPad_axisY5= 413,
    /// The axisZ5 pad input.
    topazPad_axisZ5= 414,
    /// The axisX6 pad input.
    topazPad_axisX6= 415,
    /// The axisY6 pad input.
    topazPad_axisY6= 416,
    /// The axisZ6 pad input.
    topazPad_axisZ6= 417,

    /// The axisR pad input.
    topazPad_axisR= 450,   
    /// The axisL pad input.
    topazPad_axisL= 451,    
    /// The axisR2 pad input.
    topazPad_axisR2= 452,    
    /// The axisL2 pad input.
    topazPad_axisL2= 453,    
    /// The axisR3 pad input.
    topazPad_axisR3= 454,    
    /// The axisL3 pad input.
    topazPad_axisL3= 455,    
    /// The axisR4 pad input.
    topazPad_axisR4= 456,    
    /// The axisL4 pad input.
    topazPad_axisL4= 457,    

    /// The options pad input.
    topazPad_options= 511,

    /// Number of built-in inputs.
    topazInput_Count= 512
///
/// The context instance for the toolkit. 
/// Most data within the topaz project is contextualized
/// under some a topaz instance at some level, so it is 
/// often that a topaz context is needed.
///
/// In the scripting content, only one Topaz instance
/// is accessible.
///
singleton Topaz


/// Begins the Engine execution loop.
///
/// Once run is initiated, all drawing to the screen and logic updating
/// is automated. While running, it is also possible to utilize the
/// debugging features such as the console and Entity debugger.
func run -> 


/// Pauses the Engine execution loop.
///
/// Once in a paused state, only critical objects (managers marked with pausable == false),
/// will be updated.
func pause -> 


/// Immediately pauses the execution loop.
///
/// Like Pause() but disrupts the engine immediately rather than safely waiting 
/// until the next iteration. Most useful for debugging purposes.
func pauseNow -> 


///  Resumes from a paused or broken state.
///
func resume ->  



/// Updates the main engine.
///
/// Does not include frame throttling
func iterate -> 

/// Performs a stepping operation for the entire engine. This is normally
/// called through topaz_context_iterate(), which is called by topaz_context_run().
///
func step ->

/// Performs a drawing operation for the entire engine. This is normally
/// called through topaz_context_iterate(), which is called by topaz_context_run().
///
func draw ->


/// Attaches a management-type entity.
///
/// If pausable is false, the manager will continue to update even when 
/// the engine is in a paused state.
/// Managers are kept separate from the root entity tree and are unaffected
/// switching of the root entity.
/// the pre_manager* calls ensure that these managers are stepped/drawn BEFORE 
/// the normal entity tree. 
///
func attachPreManager ->
    
    /// The entity to become a manager.
    Topaz.Entity ent



/// Same as topaz_context_attach_pre_manager, but the when the pause 
/// state is entered, these managers are unaffected.
///
func attachPreManagerUnpausable ->

    /// The entity to become a manager.
    Topaz.Entity ent


/// Same as topaz_context_attach_pre_manager, but the manager is updated 
/// AFTER the main entity tree.
///
func attachPostManager -> 

    /// The entity to become a manager.
    Topaz.Entity ent

/// Same as topaz_context_attach_post_manager, but the manager is updated 
/// even when the paused state is entered
///
func attachPostManagerUnpausable ->

    /// The entity to become a manager.
    Topaz.Entity ent


/// Ends the context execution loop.
///
func quit ->

/// Sleeps until the time required for the target frames-per-second is reached.
/// The actual resolution is machine-dependent, but it tends to be millisecond resolution.
/// This will pause the main thread.
///
func wait ->
    
    /// The target updates per second.
    Int FPS




/// Prints to the registered topaz console. If one arg is given,
/// A new line is always printed. Else, the second argument 
/// is used to determine whether the line should advance 
/// after printing.
func log -> 

    /// The string to print.
    String str 
    
    /// Whether to add a newline. (Optional)
    Boolean newline


/// Given an array of byte (0-255) values, a base64-formatted
/// string will be returned.
func toBase64 -> string

    /// The bytes to convert.
    Array inputBytes
    
    
    
/// Given a base64 string, a Topaz.Data asset will be returned 
/// allowing a means to access the raw data. If the string 
/// is invalid, undefined is returned.
func fromBase64 -> Topaz.Data
    
    /// The string to convert.
    String base64
    


///  returns whether the engine is in a paused or broken state.
///
boolean isPaused


/// Gets/sets the toplevel Entity. 
///
/// From here, you can 
/// set the Entity that holds the toplevel of the project. 
/// By default there is none.
/// From this entity, all other entities will be updated.
/// topaz handles entities in a hierarchical structure,
/// so the root must be populated and managed.
Topaz.Entity root


/// Gets the number of milliseconds since creating this context.
///
number time


/// Sets whether groups should interact. By default, only Group A interacts with Group A
///
func Topaz.Object2D.setGroupInteraction
    /// First interaction group.
    TOPAZ.OBJECT2D.GROUP firstGroup
    /// Other interaction group.
    TOPAZ.OBJECT2D.GROUP otherGroup
    /// Whether to interact.
    Boolean interact

/// The micro version number for topaz.
int versionMicro

/// The major version number for topaz.
int versionMajor 

/// The minor version number for topaz.
int versionMinor




/// Singleton for Filesystem-related tools.
Topaz.Filesystem </br>

/// Singleton for Input-related symbols.
Topaz.Input </br>

/// Singleton for Audio-related symbols.
Topaz.Audio </br>

/// Singleton for Resource-related symbols.
Topaz.Resources </br>

/// Singleton for FontManager-related symbols.
Topaz.FontManager </br>




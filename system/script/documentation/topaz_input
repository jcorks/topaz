/// Manages input devices to provide convenient access 
/// to inputs and generated input events.
///
/// In topaz, input is split into three types of 
/// device classes: pointers, keyboards, and pads.
/// Any device can have any type of input. 
singleton Topaz.Input


/// Adds a new listener object for the keyboard, calling the given 
/// functions when the relevant event is detected. 
/// An ID to the listener is returned. This ID is used for removing the listener.
///
func addKeyboardListener -> Int
    /// The listener info.
    /// The object will be accessed as a "map" object,
    /// and will look for the following key value pairs:
    ///
    /// "onPress" -> function 
    /// "onActive" -> function 
    /// "onRelease" -> function 
    /// "onUpdate" -> function
    ///
    /// When the corresponding event occurs, the callback will be triggered.
    ///
    /// onPress: arguments = (listenerMap, Topaz.Key)
    ///     Function called upon pressing of the input.
    ///     Press means: from 0 to non-zero.
    ///
    /// onActive: arguments = (listenerMap, Topaz.Key, inputValue)
    ///     Function called every update the input is non-zero.
    ///
    /// onRelease: arguments = (listenerMap, Topaz.Key)
    ///     Function called upon releasing of the input.
    ///     Release means: from non-zero to 0
    ///
    /// onUpdate: arguments = (listenerMap, Topaz.Key, inputValue)
    ///     Function called when the device posts a new event for this 
    ///     input. The value may or may not be changed. (some implementations
    ///     may post new events to the device, but the value could be the same
    ///     even when this happens)
    Object listenerMap 

/// Adds a new listener object for the pointer, calling the given 
/// functions when the relevant event is detected. 
/// An ID to the listener is returned. This ID is used for removing the listener.
///
func addPointerListener -> Int
    /// The listener info.
    /// The object will be accessed as a "map" object,
    /// and will look for the following key value pairs:
    ///
    /// "onPress" -> function 
    /// "onActive" -> function 
    /// "onRelease" -> function 
    /// "onUpdate" -> function
    ///
    /// When the corresponding event occurs, the callback will be triggered.
    ///
    /// onPress: arguments = (listenerMap, Topaz.Key)
    ///     Function called upon pressing of the input.
    ///     Press means: from 0 to non-zero.
    ///
    /// onActive: arguments = (listenerMap, Topaz.Key, inputValue)
    ///     Function called every update the input is non-zero.
    ///
    /// onRelease: arguments = (listenerMap, Topaz.Key)
    ///     Function called upon releasing of the input.
    ///     Release means: from non-zero to 0
    ///
    /// onUpdate: arguments = (listenerMap, Topaz.Key, inputValue)
    ///     Function called when the device posts a new event for this 
    ///     input. The value may or may not be changed. (some implementations
    ///     may post new events to the device, but the value could be the same
    ///     even when this happens)
    Object listenerMap 


/// Adds a new listener object for an input pad, calling the given 
/// functions when the relevant event is detected. 
/// An ID to the listener is returned. This ID is used for removing the listener.
///
func addPadListener -> Int
    /// The listener info.
    /// The object will be accessed as a "map" object,
    /// and will look for the following key value pairs:
    ///
    /// "onPress" -> function 
    /// "onActive" -> function 
    /// "onRelease" -> function 
    /// "onUpdate" -> function
    ///
    /// When the corresponding event occurs, the callback will be triggered.
    ///
    /// onPress: arguments = (listenerMap, Topaz.Key)
    ///     Function called upon pressing of the input.
    ///     Press means: from 0 to non-zero.
    ///
    /// onActive: arguments = (listenerMap, Topaz.Key, inputValue)
    ///     Function called every update the input is non-zero.
    ///
    /// onRelease: arguments = (listenerMap, Topaz.Key)
    ///     Function called upon releasing of the input.
    ///     Release means: from non-zero to 0
    ///
    /// onUpdate: arguments = (listenerMap, Topaz.Key, inputValue)
    ///     Function called when the device posts a new event for this 
    ///     input. The value may or may not be changed. (some implementations
    ///     may post new events to the device, but the value could be the same
    ///     even when this happens)
    Object listenerMap 

    /// The pad index to listen to.
    Int padID


/// Adds a new listener object for an mapped input, calling the given 
/// functions when the relevant event is detected. 
/// An ID to the listener is returned. This ID is used for removing the listener.
///
func addMappedListener -> Int
    /// The listener info.
    /// The object will be accessed as a "map" object,
    /// and will look for the following key value pairs:
    ///
    /// "onPress" -> function 
    /// "onActive" -> function 
    /// "onRelease" -> function 
    /// "onUpdate" -> function
    ///
    /// When the corresponding event occurs, the callback will be triggered.
    ///
    /// onPress: arguments = (listenerMap, Topaz.Key)
    ///     Function called upon pressing of the input.
    ///     Press means: from 0 to non-zero.
    ///
    /// onActive: arguments = (listenerMap, Topaz.Key, inputValue)
    ///     Function called every update the input is non-zero.
    ///
    /// onRelease: arguments = (listenerMap, Topaz.Key)
    ///     Function called upon releasing of the input.
    ///     Release means: from non-zero to 0
    ///
    /// onUpdate: arguments = (listenerMap, Topaz.Key, inputValue)
    ///     Function called when the device posts a new event for this 
    ///     input. The value may or may not be changed. (some implementations
    ///     may post new events to the device, but the value could be the same
    ///     even when this happens)
    Object listenerMap 

    /// The mapped string to listen to. 
    String mappedName


/// Removes an input listener.
///
func removeListener ->
    /// The listener to remove. Expected to be the return value of an addListener() call.
    Int retval

/// Returns the current state of the device input
/// This is most useful for keyboards. 
///
func getState -> Number 

    /// The input value to query. Usually of type topazKey. 
    Topaz.Key input


/// Returns the current state of the device input for a given pad.
/// See queryPads() for available pads.
///
func getPadState -> Number 
    /// The pad to query.
    Int padID 
    /// The input to query.
    Topaz.Key input 

/// Returns the current state of the device input for a mapped input
///
func getMappedState -> Number 
    /// The mapped name.
    String mappedInput 


/// Sets a deadzone for an input, meaning that if an input is detected that is below 
/// the given threshold, it is ignored.
///
func setDeadzone -> 
    /// The pad index to modify.
    Int padID 
    /// The input key to set a deadzone. Mostly useful for pad axes inputs
    Topaz.Key input 
    /// The deadzone amount. If an input value's absolute value is 
    /// below this amount, then the input will be ignored.
    Number deadzone


/// Returns an array of Ints signifying corrently connected 
/// input pads.
func queryPads -> Array 

/// Adds a new unicode listener, which will call the given functions 
/// when relevant unicode events are detected. If the engine is paused, 
/// unicode events arent processed.
///
func addUnicodeListener -> Object 
    /// The listener to read from.
    /// The object will be accessed as a "map" object,
    /// and will look for the following key value pairs:
    ///
    /// "onNewUnicode" -> function 
    /// "onRepeatUnicode" -> function 
    ///
    /// When the corresponding event occurs, the callback will be triggered.
    ///
    /// onNewUnicode: arguments = (listenerMap, unicodeValue)
    ///     New incoming unicode character is detected.
    /// 
    /// onRepeatUnicode: arguments = (listenerMap, unicodeValue)
    ///     A unicode value is being requested to be processed multiple times 
    ///     in a row.
    /// 
    /// On a US keyboard, the following special key signals exist:
    /// 17  -> left
    /// 18  -> up
    /// 19  -> right 
    /// 20  -> down
    ///
    /// For all keyboards, the following special characters exist:
    /// 32  -> newline 
    /// 8   -> backspace
    ///
    ///
    Object inputMap


/// Removes an input listener.
///
func removeUnicodeListener -> 
    /// Listener to remove. Expected to be return value from addUnicodeListener()
    Object retval 


/// Convenience getter that returns the current 
/// position of the mouse (pointer 0) as a 2-dimensional vector.
Topaz.Vector mouse

/// Convenience getter that returns the last change 
/// of the position of the mouse (pointer 0) as a 2-dimensional vector.
Topaz.Vector mouseDelta

/// Convenience function that returns the current wheel state 
/// of the mouse (pointer 0).
Number mouseWheel

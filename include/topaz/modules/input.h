/*
Copyright (c) 2020, Johnathan Corkery. (jcorkery@umich.edu)
All rights reserved.

This file is part of the topaz project (https://github.com/jcorks/topaz)
topaz was released under the MIT License, as detailed below.



Permission is hereby granted, free of charge, to any person obtaining a copy 
of this software and associated documentation files (the "Software"), to deal 
in the Software without restriction, including without limitation the rights 
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
copies of the Software, and to permit persons to whom the Software is furnished 
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall
be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
DEALINGS IN THE SOFTWARE.


*/


#ifndef H_TOPAZDC__INPUT__INCLUDED
#define H_TOPAZDC__INPUT__INCLUDED

#include <topaz/containers/string.h>
#include <topaz/containers/array.h>
typedef struct topaz_t topaz_t;
typedef struct topazInputManager_t topazInputManager_t;



/*

    Input
    -----
    Manages input devices to provide convenient access 
    to inputs and generated input events.
*/
typedef struct topazInput_t topazInput_t;



/// Defines an interface for responding to events 
/// on a specific device.
///
typedef struct topazInput_Listener_t topazInput_Listener_t;

struct topazInput_Listener_t {

    /// Function called upon pressing of the input.
    /// Press means: from 0 to non-zero
    ///
    void (*on_press)(topazInput_t *, int input, void *);

    /// Function called every update the input is non-zero.
    ///
    void (*on_active)(topazInput_t *, int input, float value, void *);

    /// Function called upon releasing of the input.
    /// Release means: from non-zero to 0
    ///
    void (*on_release)(topazInput_t *, int input, void *);

    /// Function valled when the value of the input state has changed at all.
    ///
    void (*on_change)(topazInput_t *, int input, void *);



    /// Data argument as last parameter for listener functions.
    ////
    void * userData;
};







/// Defines an interface to be used when text input is 
/// generated by the user.
/// On a US keyboard, the following special key signals exist:
/// 17  -> left
/// 18  -> up
/// 19  -> right 
/// 20  -> down
///
/// For all keyboards, the following special characters exist:
/// 32  -> newline 
/// 8   -> backspace
///
///
typedef struct topazInput_UnicodeListener_t topazInput_UnicodeListener_t;

struct topazInput_UnicodeListener_t {

    /// New incoming unicode character is detected.
    ///
    void (*on_new_unicode)(topazInput_t *, int unicodeValue, void * data);

    /// A unicode value is being requested to be processed multiple times 
    /// in a row.
    ///
    void (*on_repeat_unicode)(topazInput_t *, int unicodeValue, void * data);



    /// User data as last argument to unicode functions.
    ///
    void * userData;
};





/// Creates a new input instance. This is normally not necessary to call, as 
/// topaz_t has a default input instance that it generates for you. 
/// See topaz_get_input();
///
topazInput_t * topaz_input_create(topaz_t *, topazInputManager_t *);

/// Destroys and frees a topaz input instance.
///
void topaz_input_destroy(topazInput_t *);



/// Adds a new listener object for the keyboard, calling the given 
/// functions when the relevant event is detected. 
///
void topaz_input_add_keyboard_listener(topazInput_t *, const topazInput_Listener_t *);

/// Adds a new listener object for the pointer, calling the given 
/// functions when the relevant event is detected. 
///
void topaz_input_add_pointer_listener(topazInput_t *, const topazInput_Listener_t *);

/// Adds a new listener object for an input pad, calling the given 
/// functions when the relevant event is detected. 
///
void topaz_input_add_pad_listener(topazInput_t *, const topazInput_Listener_t *, int);

/// Adds a new listener object for an mapped input, calling the given 
/// functions when the relevant event is detected. 
///
void topaz_input_add_mapped_listener(topazInput_t *, const topazInput_Listener_t *, const topazString_t *);


/// Removes an input listener.
///
void topaz_input_remove_listener(topazInput_t *, const topazInput_Listener_t *);








/// Returns the current state of the device input
/// This is most useful for keyboards. 
///
float topaz_input_get_state(const topazInput_t *, int inputKey);

/// Returns the current state of the device input for a given pad.
/// See topaz_input_query_pads for available pads.
///
float topaz_input_get_pad_state(const topazInput_t *, int pad, int input);

/// Returns the current state of the device input for a mapped input
///
float topaz_input_get_mapped_state(const topazInput_t *, const topazString_t *);



/// Sets a deadzone for an input, meaning that if an input is detected that is below 
/// the given threshold, it is ignored.
///
void topaz_input_set_deadzone(topazInput_t *, int padID, int input, float deadZone);


/// Returns an array of ints signifying corrently connected 
/// input pads.
///
const topazArray_t * topaz_input_query_pads(const topazInput_t *);





/// Adds a new unicode listener, which will call the given functions 
/// when relevant unicode events are detected. If the engine is paused, 
/// unicode events arent processed.
///
void topaz_input_add_unicode_listener(topazInput_t *, const topazInput_UnicodeListener_t *);

/// Removes a unicode listener.
///
void topaz_input_remove_unicode_listener(topazInput_t *, const topazInput_UnicodeListener_t *);



/// Maps a string to a keyboard/pointer input. This then can be used 
/// for various map* functions.
///
void topaz_input_map(topazInput_t *, const topazString_t *, int);

/// Maps a string to a pad input. This then can be used for various map*
/// functions.
///
void topaz_input_map_pad(topazInput_t *, const topazString_t *, int pad, int input);

/// Dissociates a string with an input if in use.
///
void topaz_input_unmap(topazInput_t *, const topazString_t *);





/// Convenience function that returns the current pointer x position.
///
int topaz_input_mouse_x(const topazInput_t *);

/// Convenience function that returns the current pointer y position.
///
int topaz_input_mouse_y(const topazInput_t *);

/// Convenience function that returns the change in pointer x position since 
/// last update.
///
int topaz_input_mouse_delta_x(const topazInput_t *);

/// Convenience function that returns the change in pointer y position since 
/// last update.
///
int topaz_input_mouse_delta_y(const topazInput_t *);


/// Convenience function that returns the state of the wheel.
///
float topaz_input_mouse_wheel(const topazInput_t *);



#endif

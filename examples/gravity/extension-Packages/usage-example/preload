#include "@topaz.core"
// This example shows how to use the package made in the examplePackage directory.
// If you haven't read it, go ahead and read the "script" in the directory above,
// which describes how to produce the package used here.
//
// Because Gravity prefers static code inclusion, the package 
// checking and management is preferred to be done in this separate "preload" script.
// Preload is an optional script for the default scripting example 
// that is read and run BEFORE the script file. This allows us to check, load 
// and preload all packages so that #include directives can 
// access Package-sources script files and assets.



func main() {
    // The package.read() function takes a file path (relative to the resources directory),
    // and pre-loads it into topaz. This can fail if the data does not exist or 
    // is not readable in the correct format.
    Topaz.Package.read("../examplePackage/example.package.json");


    // Normally, all the packages that you would want would be read() 
    // ahead of time. Then you would call resolveAll() to apply the packages.
    //
    // resolving accomplishes a few tasks. First, the packages dependencies are checked
    // and resolved first. If a package does not meet its requirements, the resolution 
    // process is halted and an error reported. If a package does resolve, its assets 
    // are loaded into topaz. 
    Topaz.Package.resolveAll();

    // Now that the packages are loaded, we can check to see that we have 
    // the package we expect. It can be helpful to have "require()" calls 
    // before working with non-package code, if youre working on 
    // scripts within a package, it is much cleaner to just add the dependency
    // in the setup_package.json.
    Topaz.Package.require("ExamplePackage", ["major":1, "minor":0]);
}



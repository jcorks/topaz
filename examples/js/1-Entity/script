// By default, all topaz symbols are already loaded into the default 
// context.



// In JS, topaz implements its entities as "prefab" objects.
// with special properties. To demonstrate this, we will make our own entity
// specification and instantiage it.
//
// As a review, entities are the basic building blocks within 
// a topaz program. They are updated every frame once the engine is started 
// and can contain their own properties and components.
//
// Typically, entities will be extended in 2 ways:
//  - Populating an update function such as onStep or onDraw, which will 
//    be called every frame.
//  - Attaching components to the entity to extend its behavior in reusable ways.
//
//
// The entity we want to create will:
//  - Show a colored rectangle on the screen
//  - Change the rotation of the rectangle 
//    every frame.
//
// A prefab object's name should be treated as a class, as it's usually 
// not modified after first defining it.
var Rectangle = {
    // Every prefab object for entities is expected 
    // to contain a "props" property. The props object 
    // is the main way that you as a user will refer to an instance,
    // as update functions, such as onStep() will be passed the props 
    // object.
    props : {
        // Here we can have props properties defined with 
        // their initial values.
        visual : undefined
    },

    // onReady is a special function called for an entity
    // once it is instantiated. In our case we will use it to 
    // set up the visual.
    onReady : function(props) {

        // Shape2D is the basic component for drawing 2D shapes.
        // It can be formed into any shape, but we will stick with 
        // a basic rectangle.
        props.visual = new topaz.shape2d();

        // This changes the shape into a 200 by 200 rectangle.
        props.visual.formRectangle(200, 200);

        // By default, the center of a Shape2D is the top-left 
        // of the shape. Since rotation is about the center,
        // the set the center to one half of the rectangles span.
        props.visual.center = new topaz.vector(100, 100);

        // The color of any Shape2D can be assigned directly. 
        // The string can be a common color name, or a #RRGGBB/AA 
        // formatted hex string.
        props.visual.color = new topaz.color('purple');        

        // Even though the component has all the information 
        // we want stored within it, the component cannot update itself.
        // We still have to associate it with our entity.
        // This can be done by using the addComponent() function.
        //
        // By default, the props object will have an "entity" property 
        // added to it. The entity property contains all the built-in
        // topaz functions and properties for use with entities.
        // This helps keep your custom properties / symbols separate. 
        props.entity.addComponent(props.visual);
    },

    // Along with components, every entity can have a custom set of 
    // update functions. The most common one is onStep() which is 
    // run every frame. Note how the props instance is the first 
    // argument like with onReady().
    onStep : function(props) {

        // Every entity has built-in properties, such as 
        // position, rotation, and scale.
        // Here, we add 0.001, 0.002, and 0.003 degrees to the x, y, and z 
        // rotation respectively every frame. 
        //
        // The position, rotation, and scale properties are vector objects,
        // so to update them, you actually replace them with new vectors.
        const r = props.entity.rotation;
        props.entity.rotation = new topaz.vector(
            r.x + 0.0001,
            r.y + 0.0002,
            r.z + 0.0003
        );
    }
}


// Now that the entity has been defined, we need to actually use it.
//

// This instantiates the entity we've defined based on its prefab as a "blueprint".
var entity = new topaz.entity(Rectangle);

// The default position for an entity is 0,0,0,
// so we'll want to move it. Note how we set the center 
// of the Shape2D component already: topaz is inherently 
// hierarchical: objects will use the position / rotation / scale 
// of things that they are attached to. 
entity.position = new topaz.vector(100, 100);


// Even though we've created the our rectangle entity,
// creating the entity on its own doesnt do much.
// Much like when we created the component, 
// topaz still needs to be aware of what to do with it.
//
// Topaz manages entities in the form of a tree, so     
// entities naturally can have children entities 
// and a parent entity. The root is the very base of the tree.
// Since we are only making one entity, we will just 
// set the entity has the root itself.
//
// Normally, the root will be more symbolic than physical,
// think of a "room" in a game.
//
// The tree can be manipulated while running to control 
// runtime efficiency for the program.
//
topaz.root = entity;

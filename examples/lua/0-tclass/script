



BaseClass = tclass({
    define = function(classinst, inst, firstArg)
        local privateA = firstArg;
        local privateFunction = function()
            privateA = privateA - 1;
        end
                
        
        inst.interface({
            test = {
                get = function()
                    return privateA*2;
                end,
                
                set = function(value)
                    privateA = value*2;
                end
            },
            
            
            b = {                
                get = function()
                    return privateA;                
                end
            },

            nextValue = function()
                privateFunction();
            end,
            
            reset = function() 
                privateA = 100
            end
        });
    end
});

SubClass = tclass({
    inherits = BaseClass,
    define = function(classinst, inst)
        inst.interface({
            nextValue = function() 
                return 'f';
            end
        
        });

    end,
    
    toString = function(inst)
        return 'My Value: ' .. inst.test
    end
});




a = SubClass.new(100);
print('As a string: '..tostring(a));
print(Topaz.objectToString(a.introspect()));




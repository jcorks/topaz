var mesh = Topaz.Resources.fetchAsset(TOPAZ.ASSET.TYPE.MESH, 'testMesh');
mesh.vertices = [
   -1,-1, 0,    0, 1, 0,    0, 0,    1, 0, 1, 1,
    1,-1, 0,    0, 1, 0,    1, 0,    1, 0, 1, 1,
    1, 1, 0,    0, 1, 0,    1, 1,    1, 0, 1, 1,
   -1, 1, 0,    0, 1, 0,    0, 1,    1, 0, 1, 1,
];

mesh.addObject();
mesh.setObject(0, [
    0, 1, 2,
    2, 3, 0
]);

var material = Topaz.Resources.fetchAsset(TOPAZ.ASSET.TYPE.MATERIAL, 'testMaterial');
material.setProgramSource(
    'GLSL ES2',
    Topaz.Resources.loadAsset('', 'vertex_es2.glsl', 'vertex_es2.glsl').string,             
    Topaz.Resources.loadAsset('',   'frag_es2.glsl',   'frag_es2.glsl').string
);

material.setProgramSource(
    'GLSL',
    Topaz.Resources.loadAsset('', 'vertex.glsl', 'vertex.glsl').string,             
    Topaz.Resources.loadAsset('',   'frag.glsl',   'frag.glsl').string
);



var tex = Topaz.Resources.fetchAsset(TOPAZ.ASSET.TYPE.IMAGE, 'testTex');
tex.resize(2, 2);
tex.addFrame();
tex.setRGBA(0, 
    [
        255,   0,   0, 255,
        0,   255,   0, 255,
        0,     0, 255, 255,
        255, 255, 255, 255


    ]
);



const Example3D = tclass({
    inherits : Topaz.Entity,
    define : function(ent) {
        const v = Topaz.Shape3D.new();
        v.material = material;
        v.mesh = mesh;
        v.setTexture(0, tex);
        v.setAttribute(
            TOPAZ.RENDERER.ATTRIBUTE.TEXTURE_FILTER_HINT, 
            TOPAZ.RENDERER.TEXTURE_FILTER_HINT.NONE
        );

        var stepper = 0;
        

        ent.components = [v];


        ent.onStep = function() {
            stepper += 0.1;
            // special shorthand
            ent.rotation = {
                x:stepper, 
                y:stepper*3, 
                z:stepper*8
            };
        }
    }
});


const a = Example3D.new();
a.position = {x:0, y:0, z:-4};

const b = Example3D.new();
b.position = {x:2, y:0, z:1};
b.scale = {x:0.7, y:0.3, z:0.3};



a.children = [b];
Topaz.root = a;

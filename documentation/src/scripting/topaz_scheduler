/// Allows for running of functions at regular intervals,
/// or firing of a callback after a delay.
/// To stop a scheduler, destroy it.
///
class Topaz.Scheduler
    ///
    inherits Topaz.Component


/// Enumerator for different scheduler modes.
enum Topaz.Scheduler.MODE 
    /// Tells the scheduler to measure with real time.
    eval TIME

    /// Tells the scheduler to measure with frames.
    eval FRAME


/// The scheduler is set up in its constructor.
/// The scheduler timing begins immediately.
func [constructor] ->
    /// The mode to use.
    @Topaz.Scheduler.MODE mode

    /// Whether to have the scheduler run the callback only 
    /// once, or to continuously run it. 
    ///
    /// NOTE: despite it only running once, the scheduler 
    /// will still exist after this. Once it ends, you can 
    /// either reset() it to start again, or destroy() it 
    ///
    @Boolean justOnce

    /// How often the task will run. If the mode is topazScheduler_Mode_Time,
    /// the interval is a time in milliseconds. If the mode is 
    /// topazScheduler_Mode_Frame, the the interval is the number 
    /// of frames. This is only useful if the scheduler calls 
    /// the callback repeatedly.
    @Number interval
    /// The initial delay before the task starts being measured.
    /// If running "justOnce", this is the delay to use.
    @Int intervalDelay
    ///         Callback is called when the interval expires.
    @Function callback









/// Stops processing and timing of of the scheduler until resume() is called.
///
func pause ->

/// Resumes the scheduler. If the scheduler was not 
/// paused, no action is taken.
func resume ->


func reset ->

/// Gets the interval amount before the task interval
/// is next complete.
func getTaskIntervalRemaining -> Number 



/// Allows for running of functions at regular intervals.
class Topaz.Scheduler
    ///
    inherits Topaz.Component


/// Enumerator for different scheduler modes.
/// See Topaz.Scheduler
enum Topaz.Scheduler.MODE 
    /// Tells the scheduler to measure with real time.
    eval TIME

    /// Tells the scheduler to measyre with frames.
    eval FRAME


/// The constructor requires a mode.
func [constructor] ->
    /// The mode to use.
    @Topaz.Scheduler.MODE mode


/// Assigns a new task for the scheduler to process. Once 
/// the interval time has elapsed, the callback will be called.
///
/// The name of the task is only returned for simple tasks. See the 
/// taskName argument for more info. 
func startTask -> String
    ///         The name of the task. The existence of this key determines 
    ///         whether this is a "simple task" or a "full task". Simple
    ///         tasks only contain an interval property and a callback,
    ///         all other keys of the argument are ignored. Full tasks 
    ///         are expected to have properties for the callback, internal,
    ///         taskName, and intervalDelay.
    @String taskName
    ///         How often the task will run. If the mode is topazScheduler_Mode_Time,
    ///         the interval is a time in milliseconds. If the mode is 
    ///         topazScheduler_Mode_Frame, the the interval is the number 
    ///         of frames.
    @Number interval
    ///         The initial delay before the task starts being measured.
    @Int intervalDelay
    ///         Callback is called when the interval expires.
    @Function callback.



/// Halts the task with the given name.
/// If no such task exists, no action is taken.
///
func endTask ->
    /// The name of the task to remove. 
    @String name


/// Ends all tasks currently running by this scheduler.
///
func endAllTasks ->


/// Stops processing and timing of tasks until topaz_scheduler_resume() is called.
///
func pause ->
    /// The scheduler to pause.
    @String name

/// Resumes processing of tasks once more. If the scheduler was not 
/// paused, no action is taken.
func resume ->
    /// The scheduler to resume.
    @String name


/// Gets the interval amount before the task interval
/// is next complete.
func getTaskIntervalRemaining -> Number 
    /// The name of the task to query.
    @String name

/// Returns an array of the names of all tasks currently running.
/// Read-only.
@Array tasks

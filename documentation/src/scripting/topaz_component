/// Extends the functionality of Entities.
///
/// Each component can hold its own update cycle (step / draw)
/// as well as implement a generic event / callback system, 
/// allowing for extensions of all kinds.
///
class Topaz.Component 

/// Destroys a component. This detaches the component from the entity 
/// which emits the detach event.
///
func destroy ->

/// Steps the component. Normally called for you if attached to a host.
///
func step ->

/// Draws the component. Normally called for you if attached to a host.
///
func draw ->

/// Sets/Gets whether this component will step when its host entity steps.
/// Default is true.
@Boolean stepping 

/// Sets/Gets whether this component will draw when its host entity steps.
/// Default is true.
@Boolean drawing 

/// Sets/Gets the tag for this entity. 
@String tag 

/// Sets/Gets the entity that this component belongs to.
/// See Topaz.Entity for how to attach components
@Topaz.Entity host 


/// Triggers the specified event for this Component
///
/// Returns whether the event was allowed to propogate all the
/// way to the main handler (in other words, lets you know whether
/// all the handlers allowed the event to happen)
/// Source is passed to the handler and is usually the source of the event (but does not have to be)
func emit ->
    /// Name of the event. This should match the name that was installed.
    @String event 
    /// Entity that indicates the source of the event. For example, in a collision, this may be the object collided with.
    /// In most languages, can be omitted to emit ana anonymously-sourced event.
    @Topaz.Entity source 



/// Returns whether there exists at least one handler for the given event
///
func canHandleEvent ->
    /// Name to query.
    @String name 

/// Adds a new event to be recognized by the Component.
///
/// if mainHandler is nullptr, the event is still added, but has no default
/// handler is set. The default handler is always guaranteed to run first for the event.
func installEvent ->
    /// The name of the event.
    @String event 
    /// The default handler for the new event.
    /// Arguments when called:
    /// source: the possible source. Could be empty
    @Function callback

/// removes a handler of an event
///
func uninstallEvent ->
    /// The event to uninstall.
    @String event 


/// Adds a hook to the event. 
///
/// A hook happens at the end of a given event after all the
/// handlers have been run. Hooks occur regardless of event handler propogation.
/// (the return value is ignored for all hooks)
func installHook -> Int
    /// The event to add the hook to.
    @String event 
    /// Arguments when called:
    /// source: the possible source. Could be empty
    @Function callback

/// Removes a hook added with installHook()
///
func uninstallHook ->
    /// The event to remove the hook from.
    @String event 
    /// Id of the hook, returned from installHook().
    @Int id

/// Adds a handler to an event. 
///
/// Handlers that are added are run in LIFO order
/// and their return values dictate whether the event should propogate.
/// the last handler run for an event is always the main handler of the event.
func installHandler -> Int
    /// The event name to install to.
    @String event 
    /// Arguments when called:
    /// source: the possible source. Could be empty
    @Function callback

/// Removes a handler installed with installHandler()
func uninstallHandler ->
    /// The event to remove the handler from.
    @String event 
    /// Id of the hook, returned from installHandler().
    @Int id


/// The function to run every step.
///
@Function onStep

/// The function to run every draw frame.
///
@Function onDraw



/// The function to run when attaching this entity to a parent.
///
@Function onAttach


/// The function to run when detaching this entity to a parent.
///
@Function onDetach


/// The function to run when this component is destroyed
///
@Function onDestroy

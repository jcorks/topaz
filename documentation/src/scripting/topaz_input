/// Manages input devices to provide convenient access 
/// to inputs and generated input events.
///
/// In topaz, input is split into three types of 
/// device classes: pointers, keyboards, and pads.
/// Any device can have any type of input. 
singleton Topaz.Input

/// Standard input buttons for built-in device types.
enum Topaz.Input.KEY
    /// The 0 key.
    eval _0
    /// The 1 key.
    eval _1
    /// The 2 key.
    eval _2 
    /// The 3 key.
    eval _3
    /// The 4 key.
    eval _4
    /// The 5 key.
    eval _5
    /// The 6 key.
    eval _6
    /// The 7 key.
    eval _7
    /// The 8 key.
    eval _8
    /// The 9 key.
    eval _9
    /// The a key.
    eval A
    /// The b key.
    eval B 
    /// The c key.
    eval C
    /// The d key.
    eval D
    /// The e key.
    eval E
    /// The f key.
    eval F
    /// The g key.
    eval G 
    /// The h key.
    eval H 
    /// The i key.
    eval I
    /// The j key.
    eval J 
    /// The k key.
    eval K
    /// The l key.
    eval L 
    /// The m key.
    eval M
    /// The n key.
    eval N 
    /// The o key.
    eval O
    /// The p key.
    eval P 
    /// The q key.
    eval Q
    /// The r key.
    eval R
    /// The s key.
    eval S 
    /// The t key.
    eval T
    /// The u key.
    eval U 
    /// The v key.
    eval V 
    /// The w key.
    eval W 
    /// The x key.
    eval X 
    /// The y key.
    eval Y
    /// The z key.
    eval Z
    /// The lshift key.
    eval L_SHIFT 
    /// The rshift key.
    eval R_SHIFT 
    /// The lctrl key.
    eval L_CTRL
    /// The rctrl key.
    eval R_CTRL  
    /// The lalt key.
    eval L_ALT
    /// The ralt key.
    eval R_ALT
    /// The tab key.
    eval TAB
    /// The F1 key.
    eval F1     
    /// The F2 key.
    eval F2     
    /// The F3 key.
    eval F3     
    /// The F4 key.
    eval F4     
    /// The F5 key.
    eval F5     
    /// The F6 key.
    eval F6     
    /// The F7 key.
    eval F7     
    /// The F8 key.
    eval F8     
    /// The F9 key.
    eval F9     
    /// The F10 key.
    eval F10    
    /// The F11 key.
    eval F11    
    /// The F12 key.
    eval F12    
    /// The up arrow key.
    eval UP     
    /// The down arrow key.
    eval DOWN   
    /// The left arrow key.
    eval LEFT   
    /// The right arrow key.
    eval RIGHT  
    /// The minus key.
    eval MINUS  
    /// The equal key.
    eval EQUAL  
    /// The backspace key.
    eval BACKSPACE  
    /// The grave key.
    eval GRAVE 
    /// The esc key.
    eval ESC    
    /// The home key.
    eval HOME  
    /// The pageUp key.
    eval PAGE_UP 
    /// The pageDown key.
    eval PAGE_DOWN  
    /// The end key.
    eval END    
    /// The backslash key.
    eval BACKSLASH 
    /// The lbracket key.
    eval L_BRACKET 
    /// The rbracket key.
    eval R_BRACKET 
    /// The semicolon key.
    eval SEMICOLON 
    /// The apostrophe key.
    eval APOSTROPHE 
    /// The frontslash key.
    eval FRONTSLASH 
    /// The enter key.
    eval ENTER
    /// The delete key.
    eval DELETE
    /// The numpad0 key.
    eval NUMPAD_0 
    /// The numpad1 key.
    eval NUMPAD_1 
    /// The numpad2 key.
    eval NUMPAD_2 
    /// The numpad3 key.
    eval NUMPAD_3 
    /// The numpad4 key.
    eval NUMPAD_4 
    /// The numpad5 key.
    eval NUMPAD_5 
    /// The numpad6 key.
    eval NUMPAD_6 
    /// The numpad7 key.
    eval NUMPAD_7 
    /// The numpad8 key.
    eval NUMPAD_8 
    /// The numpad9 key.
    eval NUMPAD_9 
    /// The prtscr key.
    eval PRINT_SCREEN 
    /// The lsuper key.
    eval L_SUPER
    /// The rsuper key.
    eval R_SUPER 
    /// The space key.
    eval SPACE  
    /// The insert key.
    eval INSERT 
    /// The comma key.
    eval COMMA 
    /// The period key.
    eval PERIOD 
    /// The world1 key.
    eval WORLD_1 
    /// The world2 key.
    eval WORLD_2 
    /// The world3 key.
    eval WORLD_3 
    /// The world4 key.
    eval WORLD_4  
    /// The world5 key.
    eval WORLD_5  
    /// The world6 key.
    eval WORLD_6 
    /// The world7 key.
    eval WORLD_7  
    /// The world8 key.
    eval WORLD_8  
    /// The world9 key.
    eval WORLD_9  


enum Topaz.Input.POINTER
    /// The 0th pointer button.
    eval _0 
    /// The 1st pointer button.
    eval _1 
    /// The 2nd pointer button.
    eval _2 

    /// The pointer x axis.
    eval X 
    /// The pointer y axis.
    eval Y 
    /// The pointer wheel axis.
    eval WHEEL 


enum Topaz.Input.PAD
    /// The a pad input.
    eval A     
    /// The b pad input.
    eval B 
    /// The c pad input.
    eval C     
    /// The x pad input.
    eval X  
    /// The y pad input.
    eval Y     
    /// The r pad input.
    eval R    
    /// The l pad input.
    eval L    
    /// The r2 pad input.
    eval R2    
    /// The l2 pad input.
    eval L2    
    /// The r3 pad input.
    eval R3    
    /// The l3 pad input.
    eval L3    
    /// The start pad input.
    eval START  
    /// The select pad input.
    eval SELECT
    /// The b13 pad input.
    eval B13
    /// The b14 pad input.
    eval B14
    /// The b15 pad input.
    eval B15
    /// The b16 pad input.
    eval B16
    /// The b17 pad input.
    eval B17
    /// The b18 pad input.
    eval B18
    /// The b19 pad input.
    eval B19
    /// The b20 pad input.
    eval B20
    /// The b21 pad input.
    eval B21
    /// The b22 pad input.
    eval B22
    /// The b23 pad input.
    eval B23
    /// The b24 pad input.
    eval B24
    /// The b25 pad input.
    eval B25
    /// The b26 pad input.
    eval B26
    /// The b27 pad input.
    eval B27
    /// The b28 pad input.
    eval B28
    /// The b29 pad input.
    eval B29
    /// The b30 pad input.
    eval B30
    /// The b31 pad input.
    eval B31
    /// The b32 pad input.
    eval B32

    /// The axisX pad input.
    eval AXIS_X 
    /// The axisY pad input.
    eval AXIS_Y 
    /// The axisZ pad input.
    eval AXIS_Z 
    /// The axisX2 pad input.
    eval AXIS_X2
    /// The axisY2 pad input.
    eval AXIS_Y2
    /// The axisZ2 pad input.
    eval AXIS_Z2
    /// The axisX3 pad input.
    eval AXIS_X3
    /// The axisY3 pad input.
    eval AXIS_Y3
    /// The axisZ3 pad input.
    eval AXIS_Z3
    /// The axisX4 pad input.
    eval AXIS_X4
    /// The axisY4 pad input.
    eval AXIS_Y4
    /// The axisZ4 pad input.
    eval AXIS_Z4
    /// The axisX5 pad input.
    eval AXIS_X5
    /// The axisY5 pad input.
    eval AXIS_Y5
    /// The axisZ5 pad input.
    eval AXIS_Z5
    /// The axisX6 pad input.
    eval AXIS_X6
    /// The axisY6 pad input.
    eval AXIS_Y6
    /// The axisZ6 pad input.
    eval AXIS_Z6

    /// The axisR pad input.
    eval AXIS_R   
    /// The axisL pad input.
    eval AXIS_L    
    /// The axisR2 pad input.
    eval AXIS_R2    
    /// The axisL2 pad input.
    eval AXIS_L2    
    /// The axisR3 pad input.
    eval AXIS_R3    
    /// The axisL3 pad input.
    eval AXIS_L3    
    /// The axisR4 pad input.
    eval AXIS_R4    
    /// The axisL4 pad input.
    eval AXIS_L4    

    /// The options pad input.
    eval OPTIONS


/// The number of enum values reserved for built-in buttons.
@Int DEFAULT_INPUT_COUNT 



/// Convenience getter that returns the current 
/// position of the mouse (pointer 0) as a 2-dimensional vector.
/// Read-only
@Object mouse

/// Convenience getter that returns the last change 
/// of the position of the mouse (pointer 0) as a 2-dimensional vector.
/// Read-only
@Object mouseDelta

/// Convenience function that returns the current wheel state 
/// of the mouse (pointer 0).
/// Read-only
@Number mouseWheel


/// Adds a new listener object for the keyboard, calling the given 
/// functions when the relevant event is detected. 
/// An ID to the listener is returned. This ID is used for removing the listener.
///
/// When the corresponding event occurs, the callback will be triggered.
///
func addKeyboardListener -> Int
    /// onPress: arguments = (input)
    ///     Function called upon pressing of the input.
    ///     Press means: from 0 to non-zero.
    ///
    @Function onPress
    /// onActive: arguments = (input, value)
    ///     Function called every update the input is non-zero.
    ///
    @Function onActive

    /// onRelease: arguments = (input)
    ///     Function called upon releasing of the input.
    ///     Release means: from non-zero to 0
    ///
    @Function onRelease
    /// onUpdate: arguments = (input, value)
    ///     Function called when the device posts a new event for this 
    ///     input. The value may or may not be changed. (some implementations
    ///     may post new events to the device, but the value could be the same
    ///     even when this happens)
    @Function onUpdate

/// Adds a new listener object for the pointer, calling the given 
/// functions when the relevant event is detected. 
/// An ID to the listener is returned. This ID is used for removing the listener.
///
func addPointerListener -> Int
    /// onPress: arguments = (input)
    ///     Function called upon pressing of the input.
    ///     Press means: from 0 to non-zero.
    ///
    @Function onPress
    /// onActive: arguments = (input, value)
    ///     Function called every update the input is non-zero.
    ///
    @Function onActive

    /// onRelease: arguments = (input)
    ///     Function called upon releasing of the input.
    ///     Release means: from non-zero to 0
    ///
    @Function onRelease
    /// onUpdate: arguments = (input, value)
    ///     Function called when the device posts a new event for this 
    ///     input. The value may or may not be changed. (some implementations
    ///     may post new events to the device, but the value could be the same
    ///     even when this happens)
    @Function onUpdate


/// Adds a new listener object for an input pad, calling the given 
/// functions when the relevant event is detected. 
/// An ID to the listener is returned. This ID is used for removing the listener.
///
func addPadListener -> Int
    /// onPress: arguments = (input)
    ///     Function called upon pressing of the input.
    ///     Press means: from 0 to non-zero.
    ///
    @Function onPress
    /// onActive: arguments = (input, value)
    ///     Function called every update the input is non-zero.
    ///
    @Function onActive

    /// onRelease: arguments = (input)
    ///     Function called upon releasing of the input.
    ///     Release means: from non-zero to 0
    ///
    @Function onRelease
    /// onUpdate: arguments = (input, value)
    ///     Function called when the device posts a new event for this 
    ///     input. The value may or may not be changed. (some implementations
    ///     may post new events to the device, but the value could be the same
    ///     even when this happens)
    @Function onUpdate

    /// The pad index to listen to.
    @Int padID


/// Adds a new listener object for an mapped input, calling the given 
/// functions when the relevant event is detected. 
/// An ID to the listener is returned. This ID is used for removing the listener.
///
func addMappedListener -> Int
    /// onPress: arguments = (input)
    ///     Function called upon pressing of the input.
    ///     Press means: from 0 to non-zero.
    ///
    @Function onPress
    /// onActive: arguments = (input, value)
    ///     Function called every update the input is non-zero.
    ///
    @Function onActive

    /// onRelease: arguments = (input)
    ///     Function called upon releasing of the input.
    ///     Release means: from non-zero to 0
    ///
    @Function onRelease
    /// onUpdate: arguments = (input, value)
    ///     Function called when the device posts a new event for this 
    ///     input. The value may or may not be changed. (some implementations
    ///     may post new events to the device, but the value could be the same
    ///     even when this happens)
    @Function onUpdate

    /// The mapped string to listen to. 
    @String name


/// Removes an input listener.
///
func removeListener ->
    /// The listener to remove. Expected to be the return value of an addListener() call.
    @Int id

/// Returns the current state of the device input
/// This is most useful for keyboards. 
///
func getState -> Number 

    /// The input value to query. Usually of type topazKey. 
    @Input input


/// Returns the current state of the device input for a given pad.
/// See queryPads() for available pads.
///
func getPadState -> Number 
    /// The index of the pad to query.
    @Int pad
    /// The input to query.
    @TOPAZ.INPUT input 

/// Returns the current state of the device input for a mapped input
///
func getMappedState -> Number 
    /// The mapped name.
    @String input


/// Sets a deadzone for an input, meaning that if an input is detected that is below 
/// the given threshold, it is ignored.
///
func setDeadzone -> 
    /// The pad index to modify.
    @Int pad
    /// The input key to set a deadzone. Mostly useful for pad axes inputs
    @TOPAZ.INPUT input 
    /// The deadzone amount. If an input value's absolute value is 
    /// below this amount, then the input will be ignored.
    @Number deadzone


/// Returns an array of Ints signifying corrently connected 
/// input pads.
func queryPads -> Array 

/// Adds a new unicode listener, which will call the given functions 
/// when relevant unicode events are detected. If the engine is paused, 
/// unicode events arent processed.
/// 
/// When the corresponding event occurs, the callback will be triggered.
/// On a US keyboard, the following special key signals exist:
/// 17  -> left
/// 18  -> up
/// 19  -> right 
/// 20  -> down
///
/// For all keyboards, the following special characters exist:
/// 32  -> newline 
/// 8   -> backspace
///
///
///
func addUnicodeListener -> Object 
    /// onNewUnicode: arguments = (unicode)
    ///     New incoming unicode character is detected.
    @Function onNewUnicode
    /// onRepeatUnicode: arguments = (unicode)
    ///     A unicode value is being requested to be processed multiple times 
    ///     in a row.
    @Function onRepeatUnicode


/// Removes an input listener.
///
func removeUnicodeListener -> 
    /// Listener to remove. Expected to be return value from addUnicodeListener()
    @Object id



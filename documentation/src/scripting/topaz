///
/// The context instance for the toolkit. 
/// Most data within the topaz project is contextualized
/// under some a topaz instance at some level, so it is 
/// often that a topaz context is needed.
///
/// In the scripting content, only one Topaz instance
/// is accessible.
///
module Topaz




/// The parameters control more fine operations when rendering the 
/// the objects.
///
enum Topaz.RENDERER.ATTRIBUTE
    /// The geometric primitive to use when interpreting vertices.
    ///
    eval PRIMITIVE
    /// The transparency rule for the 2D object.
    ///
    eval ALPHA_RULE
    /// The transparency rule for the 2D object.
    ///
    eval DEPTH_TEST 

    /// The currently set etch rule, which determines how the 
    /// etch rules is applied when rendering this 2d object.
    ///
    eval ETCH_RULE

    /// The texturing hint for the 2D object.
    ///
    eval TEXTURE_FILTER_HINT



/// Allows for etching, which will ignore rendered results if they arent in the etch.
/// Etch regions last until next frame by default.
///
enum Topaz.RENDERER.ETCH_RULE 
    /// Default, no etching is done
    ///
    eval NO_ETCHING

    /// Along with whatever is being drawn, the etch region is defined. 
    /// Etches are only defined in ares where the depth test passes
    ///
    eval DEFINE 

    /// Along with whatever is being drawn, the etch region is undefined if 
    /// defined within the frame.
    ///
    eval UNDEFINE 

    /// Only shows things that fall within the etch region
    ///
    eval IN

    /// Only shows things that fall OUTSIDE the etch region
    ///
    eval OUT


/// Defines the polygon type.
///
enum Topaz.RENDERER.PRIMITIVE
    /// Triangle primitive. The most basic and versatile.
    ///
    eval TRIANGLE
    /// Line primitive. 
    ///
    eval LINE


/// Defines the depth test, meaning the rule that determines which objects are to be 
/// to be drawn in front or behind. "Less" is the standard for 3D, which allows polygons 
/// with a lower depth to be drawn in front. "NoTest" is standard for 2D, which 
/// allows graphics drawn later to be on top.
///
enum Topaz.RENDERER.DEPTHTEST 
    /// Generated framebuffer elements whose calculated depth are less
    /// will be in front.
    ///
    eval LESS
    /// Generated framebuffer elements whose calculated depth are <=
    /// will be in front.
    ///
    eval LEQ 
    /// Generated framebuffer elements whose calculated depth are greater
    /// will be in front.
    ///
    eval GREATER 
    /// Generated framebuffer elements whose calculated depth are >=
    /// will be in front.
    ///
    eval GEQ
    /// Generated framebuffer elements whole calculated depth is equal to 
    /// whats in the depth buffer
    eval EQUAL
    /// No depth test is calculated. All elements pass.
    ///
    eval NONE


/// Allows for differenct transparency effects 
///
enum Topaz.RENDERER.ALPHA_RULE 
    /// allows for standard "fade" transparency. What we're all used to
    ///
    eval ALLOW 

    /// Ignores transparency
    ///
    eval OPAQUE 
    /// Additive blending, which adds the result color ontop of whats already 
    /// there.
    ///
    eval TRANSLUCENT
    /// Makes the drawn objects invisible. Note that etching and depth 
    /// information may still be written.
    ///
    eval INVISIBLE


/// Defines the texture filter hint. Linear will 
/// texture all subsequent textures bilinearly, giving 
/// a smoother look to textures when scaled up.
/// Hints may be ignored by the renderer
///
enum Topaz.RENDERER.TEXTURE_FILTER_HINT
    /// Linear filtering of textures.
    ///
    eval LINEAR
    /// No filtering of textures.
    ///
    eval NONE

/// Data component of the a framebuffer.
///
enum Topaz.RENDERER.LAYER
    /// RGBA component.
    ///
    eval COLOR
    /// Depth component.
    ///
    eval DEPTH
    /// Etch component.
    ///
    eval ETCH
    /// All components.
    ///
    eval ALL







/// Begins the Engine execution loop.
///
/// Once run is initiated, all drawing to the screen and logic updating
/// is automated. While running, it is also possible to utilize the
/// debugging features such as the console and Entity debugger.
func run -> 


/// Pauses the Engine execution loop.
///
/// Once in a paused state, only critical objects (managers marked with pausable == false),
/// will be updated.
func pause -> 


/// Immediately pauses the execution loop.
///
/// Like Pause() but disrupts the engine immediately rather than safely waiting 
/// until the next iteration. Most useful for debugging purposes.
func pauseNow -> 


///  Resumes from a paused or broken state.
///
func resume ->  



/// Updates the main engine.
///
/// Does not include frame throttling
func iterate -> 



/// Attaches a management-type entity.
///
/// If pausable is false, the manager will continue to update even when 
/// the engine is in a paused state.
/// the pre_manager* calls ensure that these managers are stepped/drawn BEFORE 
/// the normal entity tree. Manager entities and their children are 
/// not drawn.
///
func attachPreManager ->
    
    /// The entity to become a manager.
    @Topaz.Entity manager



/// Same as topaz_context_attach_pre_manager, but the when the pause 
/// state is entered, these managers are unaffected.
///
func attachPreManagerUnpausable ->

    /// The entity to become a manager.
    @Topaz.Entity manager


/// Same as topaz_context_attach_pre_manager, but the manager is updated 
/// AFTER the main entity tree.
///
func attachPostManager -> 

    /// The entity to become a manager.
    @Topaz.Entity manager

/// Same as topaz_context_attach_post_manager, but the manager is updated 
/// even when the paused state is entered
///
func attachPostManagerUnpausable ->

    /// The entity to become a manager.
    @Topaz.Entity manager


/// Ends the context execution loop.
///
func quit ->

/// Sleeps until the time required for the target frames-per-second is reached.
/// The actual resolution is machine-dependent, but it tends to be millisecond resolution.
/// This will pause the main thread.
///
func wait ->
    
    /// The target updates per second.
    @Int FPS




/// Prints to the registered topaz console. If one arg is given,
/// A new line is always printed. Else, the second argument 
/// is used to determine whether the line should advance 
/// after printing.
func log -> 

    /// The string to print.
    @String message 
    
    /// Whether to add a newline. (Optional)
    @Boolean newline


/// Given an array of byte (0-255) values, a base64-formatted
/// string will be returned.
func toBase64 -> string

    /// The bytes to convert.
    @Array bytes
    
    
    
/// Given a base64 string, a Topaz.Data asset will be returned 
/// allowing a means to access the raw data. If the string 
/// is invalid, undefined is returned.
func fromBase64 -> Topaz.Data
    
    /// The string to convert.
    @String string
    


/// Pauses the engine's execution at the current scripting 
/// calling context and enables the debugger. The debugger is 
/// accessible via console.
func debug ->

/// Enables console interaction with the current script context
func enableConsole ->





/// Gets the default display, which is the first display created.
///
@Topaz.Display defaultDisplay

/// Gets an array of all displays.
///
@Array displays

/// Gets/Sets the current main display's clipboard contents
/// as a string. On most systems, there is only one 
/// clipboard for the system. The clipboard is 
/// associated with the defaultDisplay.
@String clipboard




///  returns whether the engine is in a paused or broken state.
///
@Boolean isPaused

/// Gets the number of milliseconds since creating this context.
///
@Number time




/// The micro version number for topaz.
@Int versionMicro

/// The major version number for topaz.
@Int versionMajor 

/// The minor version number for topaz.
@Int versionMinor




/// Singleton for Filesystem-related tools.
@Topaz.Filesystem </br>

/// Singleton for Input-related symbols.
@Topaz.Input </br>

/// Singleton for Audio-related symbols.
@Topaz.Audio </br>

/// Singleton for Resource-related symbols.
@Topaz.Resources </br>

/// Singleton for FontManager-related symbols.
@Topaz.FontManager </br>


/// Singleton for Vector-related utilities.
@Topaz.Vector </br>

/// Singleton for Color-related utilities.
@Topaz.Color </br>






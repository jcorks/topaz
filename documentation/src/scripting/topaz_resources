/// Manages assets and acts as a repository for them.
///
/// Many projects require thats some external data be 
/// loaded in during the running of the program. The Resources 
/// module provides a means to accomplish this.
/// Using standardized pathing and built-in IO translators,
/// this module will translate data for you.
///
/// Often in projects, the same asset will be used in multiple parts within 
/// the program. This module will resuse assets already loaded to provide a quick,
/// transparent way to quickly access assets.
singleton Topaz.Resources


/// Either creates a new asset if the given name doesn't exist, or 
/// returns an existing asset.
/// In the case that a new asset needs to be created, 
/// if the fileType is not able to be interpreted, then 
/// undefined is returned. This is only checked if the name doesn't exist.
/// In the case that a new asset is created, the returned asset 
/// can then be used directly to load data. See asset.h
/// 
func fetchAsset -> Topaz.Asset 
    /// The unique name of the asset.
    @String name 


/// Creates a new asset with an auto-generated name.
/// The name will be registered with the resources instance and 
/// can be used to refer to the asset.
func createAsset -> Topaz.Asset
    /// The unique name of the asset.
    @String name
    /// The path to the asset. Optional.
    /// Specify to load a new Topaz.Data asset from the 
    /// filesystem.
    /// Omit this argument if you want to create a new, empty 
    /// asset. 
    @String path
    /// The asset type. Optional.
    /// Specify this if you aren't reading an asset from 
    /// the filesystem.
    @Topaz.Asset.TYPE type




/// Takes an existing asset and converts it to another type.
/// The asset is interpreted and a new asset is produced of a type 
/// corresponding to the extension. Topaz is built with awareness of 
/// extensions, but these extensions change per build. Check alternative 
/// documentation for supposed IO translators.
///
/// If translation is successful, a new asset of a different type 
/// will be created.
func convertAsset -> Topaz.Asset 
    /// The extension / filetype to attempt to read with. i.e. 'png'
    @String extension 
    /// The asset to convert. If successful, this asset is removed.
    @Topaz.Data asset


/// Writes an asset to the filesystem at the outputpath 
/// given relative to the resources path.
///
func writeAsset -> Boolean
    /// The asset to write.
    @Topaz.Asset asset
    /// The type to write the asset as.
    @String extension 
    /// The output path to write to. This is system-dependent based on the filesystem backend.
    /// See Topaz.Filesystem for more information.
    @String path 

/// Removes the asset by name.
func removeAsset -> 
    /// Name of the asset to remove.
    @Topaz.Asset asset

/// Returns whether a particular file extension is supported.
///
func isExtensionSupport -> Boolean 
    /// The name of the file extension / type to request.
    @String extension

/// Current path for reading / writing operations. In cases where 
/// a partial path is given when using resource features 
/// that references the database, this path will be assumed 
/// to be the "current directory".
@String path

///
/// An abstraction for the environment's means of 
/// displaying rendered information.
///
/// In most contexts / systems, the display is a window within the 
/// desktop environment. On embedded systems, this may be the entire
/// screen display.
///
/// Because of the flexibility / variation in what a display can be
/// some backends may choose to implement features differently
/// or omit features altogether where appropriate.
///
class Topaz.Display

/// Every display has built in framebuffers that can be 
/// used and exchanged between for advanced rendering effects.
///
enum Topaz.Display.FRAMEBUFFER 
    /// The default framebuffer.
    eval A
    /// The second framebuffer. 
    eval B
    /// The 3rd framebuffer.
    eval C
    /// The 4th framebuffer.
    eval D

///  Controls how the Display displays Rendered data.
///
enum Topaz.Display.VIEW_POLICY
    /// The Display will show the attached Framebuffer's contents with no transformation
    /// The visual is stretched over the width and height of the display.
    ///
    eval NONE

    /// The Display will resize the attached Framebuffer to match the windows dimensions
    /// whenever the window is resized.
    /// This is the default.
    ///
    eval MATCH_SIZE
    
/// On most systems, displays have a variety of features that can be 
/// controlled. This provides a generic interface into those features,
/// where a request can be posted to change a parameter via 
/// topaz_display_set_parameter().
///
enum Topaz.Display.PARAMETER
    /// Controls the X position of the display. 
    ///
    /// Usually, this is relative to whatever environment
    /// the display exists in. For example, in a desktop environment, this could be
    /// an offset from the DE's origin. If the display does not support moving,
    /// no action is taken.
    eval X     
    /// Controls the Y position of the display. 
    ///
    /// Usually, this is relative to whatever environment
    /// the display exists in. For example, in a desktop environment, this could be
    /// an offset from the DE's origin. If the display does not support moving,
    /// no action is taken.
    eval Y
    /// The width of the display.
    ///
    eval WIDTH
    /// The height of the display.
    ///
    eval HEIGHT
    /// Controls whether the display is shown.
    eval SHOW
    /// Set the display into a fullscreen context. If fullscreen is not supported,
    /// no action is taken.
    ///
    eval FULLSCREEN
    /// Controls prevention of resizing on the user's side. 
    ///
    /// For example,
    /// in a desktop environment, this would disable the feature of resizing
    /// the window.
    ///
    eval LOCK_CLIENT_RESIZE
    /// Attempts to prevent moving on the user's side. 
    /// 
    eval LOCK_CLIENT_POSITION
    /// Controls how the Renderer's information is displayed. The default policy is "MatchSize"
    /// See ViewPolicy for more information. 
    ///
    eval VIEW_POLICY
    /// Returns whether the display has user input focus. On display implementations
    /// where this doesnt apply, i.e. where there is only one logical display available,,
    /// this will always return true. 
    ///
    eval INPUT_FOCUS




/// Destroys the display.
func destroy ->

/// Resizes the display. If the display does not support resizing, no action is taken.
///    
func resize ->
    /// The new width.
    @Int width
    /// The new height.
    @Int height

/// Adds an additional callback function to be called 
func addParameterCallback -> Int
    /// The callback to add.
    @Function func
    
/// Adds an additional callback function to be called after
/// the occurance of a closing event.
///
/// Typically on desktop systems,
/// this is triggered by pressing the close button on the window
/// associated with the Display. Callbacks are run in the order that they
/// were added in. The ID is returned.
///
func addCloseCallback -> Int
    /// The callback to add.
    @Function func

/// Removes the callback by id.
///
func removeCallback ->
    /// The callback to remove.
    @Int id



/// Gets a parameter from the display.
func getParameter -> Int
    /// The parameter to retrieve.
    @Topaz.Display.PARAMETER parameter


/// Sets a parameter from the display.
func setParameter -> Int
    /// The parameter to modify.
    @Topaz.Display.PARAMETER parameter
    /// The new value for the parameter.
    @Int value






/// Gets the framebuffer specified.
func getFramebuffer -> Topaz.Framebuffer 
    /// The framebuffer to get.
    @Topaz.Display.FRAMEBUFFER id

/// Sets the framebuffer as the main framebuffer. This framebuffer 
/// is rendered into the display every frame.
func useFramebuffer -> 
    /// The framebuffer to use.
    @Topaz.Display.FRAMEBUFFER id



/// Forces clearing of the results of drawing stored within the current framebuffer.
///
func clearMainFramebuffer ->
    /// What data to clear from the framebuffer
    @Topaz.RENDERER.LAYER layer
    
    
/// Gets the contents of the current framebuffer and 
/// puts the data into an image asset frame. 
/// The input image is cleared, resized to match the 
/// framebuffer size, and given one frame which matches the 
/// the framebuffer data.
///
/// NOTE: in general, this operation is considered "slow" as 
/// it requires a lot of communication between the backend 
/// renderer and engine, which are most likely on different 
/// devices. Use sparringly!
func captureMainFramebuffer -> 
    /// The image to populate.
    @Topaz.Image capture



/// Returns the width of the display.
/// Read-only.
@Int width

/// Returns the height of the display.
/// Read-only.
@Int height


/// Retrieves the camera associated with the display thats 
/// used for 2d operations. This camera is used when the display is set as 
/// the main display. see topazViewManager_t
/// Read-only.
@Topaz.Entity camera2d

/// Retrieves the camera associated with the display thats 
/// used for 3d operations. This camera is used when the display is set as 
/// the main display. see topazViewManager_t
/// Read-only.
@Topaz.Entity camera3d

/// The current framebuffer in use.
@Topaz.Framebuffer framebuffer

/// Defines how 3D objects visually express their vertex data. This
/// includes things such as textures, shader programs, and color definitions.
/// Shader programs are also specified here.
class Topaz.Material

    ///
    inherits Topaz.Asset

/// Sets the program data that material programs use.
///
func setProgramData ->
    // Specifies which of the data parameters to modify.
    // There are 28 values possible, so this can be on the range 0-27
    @Int i
    // The new value of the datum.
    @Number value
    
/// Sets the program data that material programs use.
///
func getProgramData -> Number
    // Specifies which of the data parameters to modify.
    // There are 28 values possible, so this can be on the range 0-27
    @Int i
    
/// Removes all shader program sources from the material.    
func clearSources ->
    

/// Sets the source for the program to use.
/// If the source changes, and the language matches that 
/// of the backend renderer, the shader program will 
/// attempt to be compiled on-the-fly. 
/// If compilation fails, a default, error shader will be 
/// be utilized.
/// Materials can store vertex and fragment source for 
/// a variety of languages, that way materials can be kept 
/// and maintained for better portability.
func setProgramSource -> 
    /// The language that this source pertains to.
    @String language 
    /// The vertex shader source.    
    @String vertexShaderSource 
    /// The fragment shader source.
    @String fragmentShaderSource
    



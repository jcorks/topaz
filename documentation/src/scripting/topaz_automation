/// Automation allows for complex and generic animation.
/// By specifying timing and transformation functions,
/// Automations can be used to animate anything, from colors,
/// to movement, to user-defined constructs.
/// 
class Topaz.Automation
    ///
    inherits Topaz.Component

/// Enumerator for the different available automation 
/// functions. Every automation can have functions associated with it
/// that describe how values change over time. These primitive 
/// functions can be string together to make virtually any 
/// value description.
/// See Topaz.Automation.
enum Topaz.Automation.FUNCTION
    /// The value instantaneously becomes the end value.
    eval NONE
    /// The value linearly becomes the end value.
    eval LINEAR
    /// The value follows a bezier curve, where the value starts slow then accelerates to the end value.
    eval ACCEL
    /// The value follows a bezier curve, where the value starts quickly then slows.
    eval SLOW
    /// The value follows a bezier curve, where the value starts slow then accelerates to the end value, but more mildly.
    eval SOFT_ACCEL
    /// The value follows a bezier curve, where the value starts quickly then slows, but more mildly.
    eval SOFT_SLOW
    /// The value becomes any value between begin and end when it is re-sampled.
    eval RANDOM




/// Adds a keyframe to the automation.
/// Every automation holds an automation, an automation 
/// is a collection of sequential keyframes that describe 
/// how a value should change over time.
func addKeyframe ->
    /// The value for the keyframe. Once this keyframe is 
    /// reached, the automation will take on this value.
    @Number value 
    /// The traveling function that describes how 
    /// the next keyframe's value should be reached. 
    @Topaz.Automation.FUNCTION function
    /// The offset from the end of the last keyframe.
    /// This can be querried with the length property.
    @Number offset


/// Same as topaz_automation_add_keyframe, except the 
/// value is a vector. 
func addVectorKeyframe ->
    /// The value for the keyframe. Once this keyframe is 
    /// reached, the automation will take on this value.
    @Object value 
    /// The traveling function that describes how 
    /// the next keyframe's value should be reached. 
    @Topaz.Automation.FUNCTION function 
    /// The offset from the end of the last keyframe.
    /// This can be querried with the length property.
    @Number offset


/// Removes all keyframes from an automation.
func clear ->

/// The values for each keyframe are averaged and 
/// set back into this automation.
/// This may create additional keyframes to 
/// facilitate
func blend ->
    /// The automation to blend with.
    @Topaz.Automation other 

/// Smooths the keyframe values across the current 
/// average.
func smooth ->

/// Adds an automation to this automation, but 
/// the automation is in string form.
func addFromString ->
    /// The automation string.
    @String string


/// Skip to a part of the automation. The value must be between or 
/// equal to 0 and the value of topaz_automation_get_length()
/// The value is modulo the length of the automation. Note that 
/// this is in keyframe units.
func skipTo ->
    /// The value to skip to.
    @Number location
    
/// Pauses resumes the automation.
func resume ->
/// Pauses the automation.
func pause ->


/// Returns the vector animated based on the keyframes 
/// and the given progress within the automation. Progress is 
/// 0 to 1 but looped.
func vectorAt -> Object
    /// The progress along the automation.
    @Number progress
    
/// Returns the float animated based on the keyframes 
/// and the given progress within the automation. Progress is 
/// 0 to 1 but looped.
func at -> Number
    /// The progress along the automation.
    @Number progress



/// Returns the current vector value within the automation 
///
@Object vector 
/// Returns the value within the automation.
@Number value

/// When read, compiles the current automation's keyframes into a string.
/// When written to, sets the automation from a string. This removes all 
/// the existing keyframes and replaces them with the 
/// the keyframes from the compiled string.
@String string 

/// Gets the length of the automation. This is the total accumulative
/// keyframe offsets within the automation. The automation length 
/// is meant to convey how long the automation is in a time-agnostic way.
/// The length of the automation is not necessarily how long in seconds 
/// or frames the automation is.
/// Read-only.
@Number length 


/// Sets the real duration of the automation.
/// This is how long it takes to get through the automation in 
/// frames. If an automation is currently running, the automation 
/// is reset.
/// Write-only
@Number durationFrames 
/// Sets the real duration of the automation.
/// This is how long it takes to get through the automation
/// in seconds. If an automation is currently running,
/// the automation is reset.
/// Write-only
@Number durationSeconds
/// Gets the duration of the automation in either frames or seconds.
@Number duration
// Gets/Sets whether the automation is looped.
/// When its looped, the automation will start over 
/// when the animato is done
@Boolean looped 
/// Gets/Sets the speed multiplier for the automation.
/// The default is 1.0.
@Number speed 


